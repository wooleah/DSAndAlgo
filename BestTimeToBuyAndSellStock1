// Iterative - beats 70% runtime

function sol(prices) {
  let final = 0;
  let buyIndex = 0;
  for (let i = 0; i < prices.length; ++i) {
    if (prices[i] < prices[buyIndex]) buyIndex = i;
    else if (prices[buyIndex] >= prices[i]) continue;

    final = Math.max(final, prices[i] - prices[buyIndex]);
  }

  return final;
}

sol([7, 5, 3, 4])


Kadane's algorithm solution
https://leetcode.com/problems/best-time-to-buy-and-sell-stock/discuss/39038/Kadane's-Algorithm-Since-no-one-has-mentioned-about-this-so-far-%3A)-(In-case-if-interviewer-twists-the-input)

public int maxProfit(int[] prices) {       
  int maxCur = 0, maxSoFar = 0;
  for(int i = 1; i < prices.length; i++) {
      maxCur = Math.max(0, maxCur += prices[i] - prices[i-1]);
      maxSoFar = Math.max(maxCur, maxSoFar);
  }
  return maxSoFar;
}
